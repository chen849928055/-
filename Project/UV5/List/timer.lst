C51 COMPILER V9.60.0.0   TIMER                                                             05/11/2020 22:35:56 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\Output\timer.obj
COMPILER INVOKED BY: c:\Keil_v5\C51\BIN\C51.EXE ..\..\Utilities\timer.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Appli
                    -cation;..\..\User\INC;..\..\Libraries;..\..\Utilities) DEBUG PRINT(.\List\timer.lst) TABS(2) OBJECT(.\Output\timer.obj)

line level    source

   1          /**
   2          *   ************************************************************************************
   3          *               上海芯圣电子股份有限公司
   4          *                   www.holychip.cn
   5          * ************************************************************************************
   6          * @Examle Version   V1.0.2.0
   7          * @Demo Version   V1.0.2.0
   8          * @Date       2019.7.30
   9          * ************************************************************************************
  10          *                  模块性能介绍
  11          * 1、MCU的定时器0，1共有四种工作方式
  12          *    方式0：16位自动重装定时器/计数器
  13          *    方式1：16位定时器/计数器
  14          *    方式2：8位自动重装定时器/计数器
  15          *    方式3：T0分成两个（TL0/TH0）独立的8位定时器/计数器（T1无此模式）
  16          * ************************************************************************************
  17          *                  应用注意事项
  18          * 1、方式3时T0占用T1的TR1、TF1及中断源，由于TR1被T0占用，此时需要关闭T1可将T1设为工作
  19          *    方式3
  20          * 2、在方式0（Mode0）时THx(x = 0,1)和TLx(x = 0,1)读写操作遵循先高位后低位。并且在修改
  21          *    重载数据时，低位无论有无改变，只要高位被修改，低位都必须再写入一次，方式 1、2、3
  22          *    时无此要求
  23          * ************************************************************************************
  24          *                        客户服务
  25          * 感谢您使用我们的单片机，若发现错误或对函数的使用存在疑问。请添加上海芯圣电子官方QQ群
  26          * ****************************技术支持群：201030494***********************************
  27          *   ************************************************************************************
  28          **/
  29          
  30          #include "timer.h" 
  31          #include "key.h" 
  32          #include "buzzer.h" 
  33          
  34          #define  key_up     0   //按键弹起
  35          #define  key_down   1   //按键按下 
  36          //sbit DO = P5^5;     //433数据接收IO
  37           extern ux16 KEY_VALUE ;
  38          //u8 RF ;     //433数据接收IO
  39           
  40           
  41          u8 a_code1, a_code2, a_code3, a_code4; //第一次遥控编码
  42          u8 rf_ok1;//第一次遥控编码赋值成功
  43          u8 b_code1, b_code2, b_code3, b_code4; //第二次遥控编码
  44          u8 rf_ok2;//第二次遥控编码赋值成功
  45          u8 t_code1, t_code2, t_code3, t_code4; //临时遥控编码
  46          u8 last_state;//上一个编码，0为低，1为高
  47          u16 hh_w,ll_w;//高低电平宽度
  48          u8 flag_syn;//同步码标志位，置1表示已经收到同步码，置0表示未收到同步码
  49          u8 rf_data[4]; //最后收到的遥控编码
  50          u8  ma_x;                //接收到第几位编码
  51          u16 s; // 收到第一个码和第二个码之间不能超过s个周期
  52          u8 rf_ok=1;
  53          u8 decode_ok=0;
  54          
C51 COMPILER V9.60.0.0   TIMER                                                             05/11/2020 22:35:56 PAGE 2   

  55          u8 key_state;
  56          u16 key_state_cnt;
  57          u8 config_key2_cnt = 0;   //配网键计数器
  58          u8 config_5s_flag = 0;    //对码键的状态标志,1->进入配码状态,0->没进入配码状态
  59          u8 config_rf_15s_cnt;
  60          u8 config_15s_flag;
  61          u16 time_1s_cnt;
  62          u8 time_3s_cnt;
  63          u8 wifi_work_state = 1;  //1->未联网状态;0->联网状态
  64          u16 timer1;
  65          
  66          u8 wifi_start_15s_flag=0; //wifi启动15s标志
  67          u8 wifi_start_15s_cnt=0;
  68          u8 time_1s_flag;
  69          
  70          u16 wifi_high_cnt;
  71          u16 wifi_low_cnt;
  72          
  73          u8 buz_250us_cnt;
  74          u8 buz_10ms_cnt;
  75          u8 buz_10ms_flag;  //蜂鸣器驱动函数运行标志,1运行,0不运行;
  76          u8 rf_key_status;  //1->遥控器有按键按下;0->遥控器无按键按下
  77          
  78          u8 key_pressed_20ms_flag;
  79          u8 key_pressed_20ms_cnt;
  80          /***************************************************************************************
  81            * @实现效果 T0定时1ms，每进一次中断，P03翻转一次
  82          ***************************************************************************************/
  83          void timer0_init(void) 
  84          {
  85   1      /**********************************TIM0配置初始化**************************************/
  86   1        TCON1 = 0x00;           //Tx0定时器时钟为Fosc
  87   1        TMOD = 0x00;            //16位重装载定时器/计数器
  88   1      
  89   1        //Tim0计算时间  = (65536 - 0xFACB) * (1 / (Fosc /Timer分频系数))
  90   1        //        = 1333 / (16000000 / 12)
  91   1        //        = 1 ms
  92   1      
  93   1        //定时1ms
  94   1        //反推初值  = 65536 - ((1/1000) / (1/(Fosc / Timer分频系数)))
  95   1        //        = 65536 - ((1/1000) / (1/(16000000 / 12)))
  96   1        //      = 65536 - 1333
  97   1        //      = 0xFACB
  98   1        
  99   1        TH0 = 0xFA;
 100   1        TL0 = 0xCB;             //T0定时时间1ms
 101   1        IE |= 0x02;             //打开T0中断
 102   1        TCON |= 0x10;           //使能T0
 103   1          
 104   1         
 105   1         
 106   1      }
 107          
 108          /***************************************************************************************
 109            * @说明   T0中断服务函数
 110            * @参数 无
 111            * @返回值 无
 112            * @注   无
 113          ***************************************************************************************/
 114          void TIMER0_Rpt(void) interrupt TIMER0_VECTOR
 115          {
 116   1          key_state_cnt++;    //按键抬起计数器
C51 COMPILER V9.60.0.0   TIMER                                                             05/11/2020 22:35:56 PAGE 3   

 117   1          if(timer1 >0) timer1--;
 118   1         /*********************10ms到*********************/
 119   1          if(++buz_10ms_cnt>10 ) 
 120   1          {
 121   2            buz_10ms_cnt = 0;
 122   2            buz_10ms_flag= 1;
 123   2          }
 124   1           /*********************20ms到*********************/
 125   1          if(++key_pressed_20ms_cnt>50 ) 
 126   1          {
 127   2            key_pressed_20ms_cnt = 0;
 128   2            key_pressed_20ms_flag= 1;
 129   2          }
 130   1         /*******************3秒时间到*******************/  
 131   1          if(P2_1==0)
 132   1          {
 133   2              wifi_high_cnt = 0;
 134   2            
 135   2              if(++wifi_low_cnt>=3000)
 136   2              {
 137   3                wifi_low_cnt = 3000;  //低电平持续时间大于3000ms
 138   3                wifi_work_state = 0;  //联网状态
 139   3              }
 140   2              
 141   2          }
 142   1          else
 143   1          {
 144   2              wifi_low_cnt = 0;
 145   2              
 146   2              if(++wifi_high_cnt<=2000)//高电平持续时间大于2000ms
 147   2              {
 148   3                     
 149   3                  wifi_work_state = 1;  //未联网状态
 150   3              }
 151   2            
 152   2           }
 153   1        
 154   1        
 155   1          /******************1秒时间到*******************/
 156   1          if(++time_1s_cnt>1000)
 157   1          {
 158   2              time_1s_cnt = 0;
 159   2          
 160   2              time_1s_flag = 1;
 161   2            
 162   2            
 163   2             /*******************5秒时间到*******************/  
 164   2              if(config_key2_status == key_down) //任意按键按下5s
 165   2              {
 166   3                if(++config_key2_cnt>=5)
 167   3                {
 168   4                   config_key2_cnt = 0;
 169   4                   config_5s_flag  = 1;           
 170   4                }
 171   3              }
 172   2              else
 173   2              {
 174   3                   config_key2_cnt = 0 ;
 175   3              }
 176   2              /*******************15秒时间到*******************/  
 177   2              
 178   2              if(++config_rf_15s_cnt >= 15)
C51 COMPILER V9.60.0.0   TIMER                                                             05/11/2020 22:35:56 PAGE 4   

 179   2              {
 180   3                 config_rf_15s_cnt = 0;
 181   3                
 182   3                 receive_rf_flag = 0;
 183   3                 key_code = 0x00; 
 184   3              }
 185   2              
 186   2              /*************************开机启动15s***************************/
 187   2              if(++wifi_start_15s_cnt>=15)
 188   2              {
 189   3                wifi_start_15s_flag = 1; //wifi启动15s标志
 190   3              }
 191   2              
 192   2          }
 193   1      }
 194          
 195          /***************************************************************************************
 196            * @实现效果 T0定时50us，每进一次中断， 
 197          ***************************************************************************************/
 198          void timer1_init(void) 
 199          {
 200   1        /**********************************TIM1配置初始化**************************************/
 201   1        TCON1 = 0x00;           //T1定时器时钟为Fosc
 202   1        TMOD = 0x00;            //16位重装载定时器/计数器
 203   1      
 204   1        //Tim1计算时间  = (65536 - 0xFACB) * (1 / (Fosc /Timer分频系数))
 205   1        //        = 1333 / (16000000 / 12)
 206   1        //        = 1 ms
 207   1      
 208   1        //定时1ms
 209   1        //反推初值  = 65536 - ((50/1000000) / (1/(Fosc / Timer分频系数)))
 210   1        //        = 65536 - ((50/1000000) / (1/(16000000 / 12)))
 211   1        //      = 65536 - 67
 212   1        //      = 0xFFBD
 213   1        
 214   1        TH1 = 0xFF;
 215   1        TL1 = 0xBD;
 216   1        IE |= 0x08;             //打开T1中断
 217   1        TCON |= 0x40;           //使能T1
 218   1         
 219   1      
 220   1      
 221   1      }
 222          /***************************************************************************************
 223            * @说明   T1中断服务函数
 224            * @参数 无
 225            * @返回值 无
 226            * @注   无
 227          ***************************************************************************************/
 228          void TIMER1_Rpt(void) interrupt TIMER1_VECTOR
 229          {
 230   1          #if  1
 231   1         
 232   1              if(F_Buz==1)
 233   1              {
 234   2                if(++buz_250us_cnt>=5)
 235   2                {
 236   3                  buz_250us_cnt = 0;
 237   3                  BUZ_FLIPS ; //BUZ 取反 针对无源BUZ -- 4K  
 238   3                }
 239   2                         
 240   2              }
C51 COMPILER V9.60.0.0   TIMER                                                             05/11/2020 22:35:56 PAGE 5   

 241   1              else
 242   1              {
 243   2                buz_250us_cnt = 0;
 244   2              }
 245   1        
 246   1      //        if( KEY_VALUE !=0)
 247   1      //        {
 248   1      //          return;
 249   1      //        }
 250   1              
 251   1              
 252   1        
 253   1              //接收到低电平，ll_w自加，上一状态设为低电平
 254   1              if (!P2_3)
 255   1              { 
 256   2                  ll_w++;                         
 257   2                  last_state = 0;
 258   2                  
 259   2              }    
 260   1              //接收到高电平，hh_w自加
 261   1              //所有的同步码最后一位，每个编码的最后一位都是由低变为高的。
 262   1              else 
 263   1              { 
 264   2       
 265   2                  hh_w++;
 266   2                  //如果上一状态为低电平，即由低变为高的上升沿  
 267   2                  if (!last_state)  
 268   2                  {   
 269   3         
 270   3                      //如果未接收到同步码，判断同步码的开始时刻
 271   3                      if (((hh_w>=4)&&(hh_w<=6))&&((ll_w>=150)&&(ll_w<=320)))  //7.5ms到10.5ms
 272   3                      { 
 273   4                          flag_syn = 1 ;
 274   4                          ma_x = 0;
 275   4                          t_code1=0; 
 276   4                          t_code2=0;
 277   4                          t_code3=0;                  
 278   4                          t_code4=0; //初始化 
 279   4                        
 280   4                        
 281   4                         
 282   4                        
 283   4                      }
 284   3                      else if (flag_syn == 1 && ma_x>=32)
 285   3                      {   
 286   4       
 287   4                           
 288   4                       }  
 289   3                        else if ((flag_syn) ) 
 290   3                        { 
 291   4                            
 292   4                             switch (ma_x)
 293   4                             { 
 294   5                                 case 0 : {if((ll_w >= 4)&&(ll_w <= 6)) t_code1=t_code1 | 0x80;break;}  
 295   5                                 case 1 : {if((ll_w >= 4)&&(ll_w <= 6)) t_code1=t_code1 | 0x40;break;}  
 296   5                                 case 2 : {if((ll_w >= 4)&&(ll_w <= 6)) t_code1=t_code1 | 0x20;break;} 
 297   5                                 case 3 : {if((ll_w >= 4)&&(ll_w <= 6)) t_code1=t_code1 | 0x10;break;}
 298   5                                 case 4 : {if((ll_w >= 4)&&(ll_w <= 6)) t_code1=t_code1 | 0x08;break;} 
 299   5                                 case 5 : {if((ll_w >= 4)&&(ll_w <= 6)) t_code1=t_code1 | 0x04;break;} 
 300   5                                 case 6 : {if((ll_w >= 4)&&(ll_w <= 6)) t_code1=t_code1 | 0x02;break;} 
 301   5                                 case 7 : {if((ll_w >= 4)&&(ll_w <= 6)) t_code1=t_code1 | 0x01;break;}
 302   5                                 case 8 : {if((ll_w >= 4)&&(ll_w <= 6)) t_code2=t_code2 | 0x80;break;} 
C51 COMPILER V9.60.0.0   TIMER                                                             05/11/2020 22:35:56 PAGE 6   

 303   5                                 case 9 : {if((ll_w >= 4)&&(ll_w <= 6)) t_code2=t_code2 | 0x40;break;} 
 304   5                                 case 10: {if((ll_w >= 4)&&(ll_w <= 6)) t_code2=t_code2 | 0x20;break;}
 305   5                                 case 11: {if((ll_w >= 4)&&(ll_w <= 6)) t_code2=t_code2 | 0x10;break;}
 306   5                                 case 12: {if((ll_w >= 4)&&(ll_w <= 6)) t_code2=t_code2 | 0x08;break;}
 307   5                                 case 13: {if((ll_w >= 4)&&(ll_w <= 6)) t_code2=t_code2 | 0x04;break;}
 308   5                                 case 14: {if((ll_w >= 4)&&(ll_w <= 6)) t_code2=t_code2 | 0x02;break;} 
 309   5                                 case 15: {if((ll_w >= 4)&&(ll_w <= 6)) t_code2=t_code2 | 0x01;break;} 
 310   5                                 case 16: {if((ll_w >= 4)&&(ll_w <= 6)) t_code3=t_code3 | 0x80;break;}
 311   5                                 case 17: {if((ll_w >= 4)&&(ll_w <= 6)) t_code3=t_code3 | 0x40;break;} 
 312   5                                 case 18: {if((ll_w >= 4)&&(ll_w <= 6)) t_code3=t_code3 | 0x20;break;}
 313   5                                 case 19: {if((ll_w >= 4)&&(ll_w <= 6)) t_code3=t_code3 | 0x10;break;} 
 314   5                                 case 20: {if((ll_w >= 4)&&(ll_w <= 6)) t_code3=t_code3 | 0x08;break;} 
 315   5                                 case 21: {if((ll_w >= 4)&&(ll_w <= 6)) t_code3=t_code3 | 0x04;break;}
 316   5                                 case 22: {if((ll_w >= 4)&&(ll_w <= 6)) t_code3=t_code3 | 0x02;break;}
 317   5                                 case 23: {if((ll_w >= 4)&&(ll_w <= 6)) t_code3=t_code3 | 0x01;break;}        
 318   5                                 case 24: {if((ll_w >= 4)&&(ll_w <= 6)) t_code4=t_code4 | 0x80;break;} 
 319   5                                 case 25: {if((ll_w >= 4)&&(ll_w <= 6)) t_code4=t_code4 | 0x40;break;} 
 320   5                                 case 26: {if((ll_w >= 4)&&(ll_w <= 6)) t_code4=t_code4 | 0x20;break;}
 321   5                                 case 27: {if((ll_w >= 4)&&(ll_w <= 6)) t_code4=t_code4 | 0x10;break;}  
 322   5                                 case 28: {if((ll_w >= 4)&&(ll_w <= 6)) t_code4=t_code4 | 0x08;break;} 
 323   5                                 case 29: {if((ll_w >= 4)&&(ll_w <= 6)) t_code4=t_code4 | 0x04;break;} 
 324   5                                 case 30: {if((ll_w >= 4)&&(ll_w <= 6)) t_code4=t_code4 | 0x02;break;}
 325   5                                 case 31: {if((ll_w >= 4)&&(ll_w <= 6)) t_code4=t_code4 | 0x01;break;}
 326   5                                               
 327   5                              } 
 328   4                            
 329   4                             
 330   4                            ma_x++;    
 331   4                            if(ma_x>=32)
 332   4                            {
 333   5                               if(!rf_ok1)
 334   5                               {
 335   6                                    a_code4=t_code4;
 336   6                                    a_code3=t_code3;
 337   6                                    a_code2=t_code2;
 338   6                                    a_code1=t_code1;
 339   6                                    rf_ok1=1;        // 可以解码了 
 340   6                                    s=1000;          //50ms 内接收的第二帧数据和第一帧数据相同说明接收成功
 341   6      
 342   6                                    if(a_code4==0x60||a_code4==0x61||a_code4==0x62)
 343   6                                    {
 344   7                                      rf_key_status = 1;
 345   7                                      key_state = key_down;
 346   7                                       
 347   7                                    }
 348   6                                    else
 349   6                                    {
 350   7                                      decode_ok=0;    
 351   7                                      rf_key_status = 1;                                
 352   7                                      key_state = key_up;
 353   7                                        
 354   7                                    }
 355   6                                  
 356   6                                }
 357   5                                else
 358   5                                {
 359   6                                    b_code4=t_code4;
 360   6                                    b_code3=t_code3;
 361   6                                    b_code2=t_code2;
 362   6                                    b_code1=t_code1;
 363   6                                    rf_ok2=1; 
 364   6                                }   
C51 COMPILER V9.60.0.0   TIMER                                                             05/11/2020 22:35:56 PAGE 7   

 365   5                                flag_syn=0;
 366   5                            
 367   5                             }
 368   4                       }
 369   3                       else  //没有按键按下
 370   3                       {
 371   4                          ma_x=0; 
 372   4                          flag_syn=0;
 373   4                          t_code4=0;
 374   4                          t_code3=0;
 375   4                          t_code2=0; 
 376   4                          t_code1=0;
 377   4      
 378   4                          a_code4=0;
 379   4                          a_code3=0;
 380   4                          a_code2=0;
 381   4                          a_code1=0;
 382   4                        
 383   4                          key_state = key_up;
 384   4                         rf_key_status = 1;
 385   4                          
 386   4                          config_key2_status = key_up;
 387   4                       } 
 388   3                       
 389   3                       ll_w=0;
 390   3                       hh_w=0; 
 391   3                   }          
 392   2                    last_state=1;  //记录本次电平状态
 393   2                     
 394   2              }
 395   1          if(rf_ok1)  
 396   1          {
 397   2           
 398   2            s--;
 399   2            if(!s) 
 400   2            {
 401   3              rf_ok1=0;
 402   3            }
 403   2            
 404   2            if(rf_ok2) 
 405   2            {
 406   3              if((a_code1==b_code1)&&(a_code2==b_code2)&&(a_code4==b_code4)) // a_code3总是0xff 0x00来回变幻的
 407   3              {
 408   4                rf_ok=1; 
 409   4                decode_ok=1;
 410   4                rf_key_status = 1;
 411   4                key_state = key_down;         
 412   4              }
 413   3              else
 414   3              {
 415   4                rf_ok=0;
 416   4                decode_ok=0;
 417   4              }
 418   3                rf_ok1=0;
 419   3                rf_ok2=0;
 420   3            }                   
 421   2          }
 422   1       
 423   1       #endif
 424   1      } 
 425            
 426                
C51 COMPILER V9.60.0.0   TIMER                                                             05/11/2020 22:35:56 PAGE 8   

 427           
 428          
 429          
 430          
 431          
 432          
 433          
 434          
 435          
 436          
 437          
 438          
 439          
 440          
 441          
 442          
 443          
 444          
 445          
 446          
 447          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1851    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     55    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
