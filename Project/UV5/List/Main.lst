C51 COMPILER V9.60.0.0   MAIN                                                              05/11/2020 22:35:55 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\Main.obj
COMPILER INVOKED BY: c:\Keil_v5\C51\BIN\C51.EXE ..\..\User\Main.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Application
                    -;..\..\User\INC;..\..\Libraries;..\..\Utilities) DEBUG PRINT(.\List\Main.lst) TABS(2) OBJECT(.\Output\Main.obj)

line level    source

   1          /******************* (C) COPYRIGHT 2009~2019 holychip **************************
   2          * File Name          : Main.c
   3          * Author             : Touch Team
   4          * Version            : V1.0.5.0
   5          * Date               : 2019/10/01
   6          ********************************************************************************/
   7          //´¥Ãþµ÷ÊÔ Ö»Òª±£Ö¤differÖµºÍÔëÒôÖµµÄ²îÔÚ50~100×óÓÒ¾Í¿ÉÒÔ
   8          //·äÃùÆ÷Îª4k,ÒÑµ÷Í¨
   9          //2020/05/08 »ù±¾¶¼µ÷Í¨ÁË
  10          //================================================================================
  11          #define  ALLOCATE_EXTERN
  12          #include "HC89F303.h"
  13          #include "HC89F30x_SYS.h"
  14          #include "HC89F30x_IO_INIT.h"
  15          #include "HC89F30x_GeneralKey_Touch_Lib_V1.04\HC89F30x_GeneralKey_Touch_Lib.h"
  16          #include "HC89F30x_GeneralKey_Touch_Lib_V1.04\HC89F30x_GeneralKey_Touch_Filter.h"
  17          #include "HC89F30x_GeneralKey_Touch_Lib_V1.04\HC89F30x_GeneralKey_Touch_Multibutton.h"
  18          #include "HC89F30x_TouchUartDebug_Lib_V1.00\HC89F30x_TouchUartDebug_Lib_CFG.h"
  19          #include "HC89F30x_TouchUartDebug_Lib_V1.00\HC89F30x_TouchUartDebug_Lib.h"
  20          
  21          
  22          
  23          #include "key.h"
  24          #include "timer.h"
  25          #include "eeprom.h"
  26          #include "buzzer.h"
  27          //================================================================================
  28          void  CheckKey(u16 key_flag);
  29          void RF_code_match(void) ; //RFÅä¶Ô´¦Àí  ½ÓÊÕ°´¼üÂë,²¢´æ³öÆðÀ´
  30          void check_wifi_work_state(void);
  31          void check_address_change(void);
  32          void config_rf(void);
  33          void RF_code_process(void);  //RFÅä¶Ô´¦Àí
  34          void key_state_check(void);
  35          void RF_LED_Flicker(void ); 
  36          //ux8 test[]={0,1,2,3,4};
  37          //ux8 test1[5]={0xff};
  38          //ux8 test2[5]={0xff};
  39          
  40          ux16 KEY_VALUE = 0;
  41          u16 OLD_KEY = 0;
  42          
  43          
  44          u8 KEY1,KEY2,KEY3; 
  45           
  46          
  47          u8 last_key1_status = 0;    //ÉÏÒ»´Îkey1µÄ×´Ì¬
  48          u8 last_key2_status = 0;    //ÉÏÒ»´Îkey2µÄ×´Ì¬
  49          u8 last_key3_status = 0;    //ÉÏÒ»´Îkey3µÄ×´Ì¬
  50          
  51          //u8 last_config_key1_status = 0;    //ÉÏÒ»´ÎÅäÍøkey1µÄ×´Ì¬
  52          //u8 last_config_key2_status = 0;    //ÉÏÒ»´ÎÅäÍøkey2µÄ×´Ì¬
  53          //u8 last_config_key3_status = 0;    //ÉÏÒ»´ÎÅäÍøkey3µÄ×´Ì¬
  54          
C51 COMPILER V9.60.0.0   MAIN                                                              05/11/2020 22:35:55 PAGE 2   

  55          ux8 Last_addr_high1 = 0;
  56          ux8 Last_addr_low1  = 0;
  57          ux8 Last_addr_high2 = 0;
  58          ux8 Last_addr_low2  = 0;
  59          
  60          
  61          ux8 write_eerpom_flag;  //ÍùEEPROMÐ´ÈëµÄ´ÎÊý±êÖ¾,Ã¿Ð´ÈëÒ»´Î,¸Ã±êÖ¾¶¼È¡·´
  62          
  63          ux8 config_key2_status =0;
  64          
  65          ux8 ADDR_BUF[20]={0} ;
  66          ux8 addr_high1 ;
  67          ux8 addr_low1 ; 
  68          ux8 addr_high2 ;
  69          ux8 addr_low2 ;
  70          ux8 addr_high_temporary ;  //ÁÙÊ±±äÁ¿
  71          ux8 addr_low_temporary ; 
  72          ux8 Last_KEY1  = 0;
  73          ux8 Last_KEY2  = 0;
  74          ux8 Last_KEY3  = 0;
  75          
  76          ux8 config_rf_flag = 0;   //ÅäÍø±êÖ¾Îª1Ê±,°ÑµØÖ·ÂëÐ´Èëeeprom;
  77          
  78          ux8 led_flag;
  79          ux8 receive_rf_flag;   //Åä¶ÔÊ±½ÓÊÕµ½433°´¼üÂë,¸Ã±êÖ¾ÖÃÒ»,´ËÊ±½ÓÊÕ°å°´ÏÂ°´¼ü,¸Ã±êÖ¾ÇåÁã;15sÄÚÃ»ÓÐÅäÂë,¸Ã±ê
             -Ö¾Ò²ÇåÁã
  80          ux8 key_code;          //Åä¶ÔÊ±½ÓÊÕµ½433°´¼üÂë,ÂëÖµÁÙÊ±´æ´¢ÔÚÕâ¸ö±äÁ¿ÀïÃæ;15sÄÚÃ»ÓÐÅäÂë,¸Ã±äÁ¿Ò²ÇåÁã
  81          ux8 key_status_change_flag;  //1->keyµÄ×´Ì¬·¢ÉúÁË±ä»¯;0->keyµÄ×´Ì¬Ã»±ä»¯
  82           
  83          
  84          
  85          
  86          
  87          void main()
  88          {
  89   1        SystemInit();           //Ê±ÖÓ³õÊ¼»¯º¯Êý(Ä¬ÈÏFosc=Fcpu=16M)
  90   1        IO_Init();
  91   1        timer0_init() ;
  92   1        timer1_init() ;
  93   1        eeprom_init(); 
  94   1        
  95   1      //  Flash_ReadArr(EEPROM_ADDR,5,(u8*)test1);  //¶ÁÈ¡µØÖ·0x3C00ËùÔÚÉÈÇø                     
  96   1      //  Flash_EraseBlock(EEPROM_ADDR);       //²Á³ýµØÖ·0x3C00ËùÔÚÉÈÇø
  97   1      //  Flash_ReadArr(EEPROM_ADDR,5,(u8*)test1);
  98   1      //  Flash_WriteArr(EEPROM_ADDR,5,(u8*)test);  //ÔÚµØÖ·0x3C00Ð´ÈëÊý¾Ý
  99   1      //  Flash_ReadArr(EEPROM_ADDR,5,(u8*)test2);  //¶ÁÈ¡µØÖ·0x3C00ËùÔÚÉÈÇø
 100   1        Flash_ReadArr(EEPROM_ADDR,8,(u8*)ADDR_BUF);
 101   1        addr_high1 = ADDR_BUF[1] ;
 102   1        addr_low1  = ADDR_BUF[2] ;
 103   1        addr_high2 = ADDR_BUF[3] ;
 104   1        addr_low2  = ADDR_BUF[4] ; 
 105   1        
 106   1        KEY1 = ADDR_BUF[5] ; 
 107   1        KEY2 = ADDR_BUF[6] ;
 108   1        KEY3 = ADDR_BUF[7] ;
 109   1        
 110   1        Last_addr_high1 = addr_high1;
 111   1        Last_addr_low1  = addr_low1;
 112   1        Last_addr_high2 = addr_high2;
 113   1        Last_addr_low2  = addr_low2;  
 114   1        
 115   1        Last_KEY1  = KEY1;
C51 COMPILER V9.60.0.0   MAIN                                                              05/11/2020 22:35:55 PAGE 3   

 116   1        Last_KEY2  = KEY2;
 117   1        Last_KEY3  = KEY3;  
 118   1        
 119   1        EA = 1;
 120   1        CTK_Init();             
 121   1      #if TouchUartDebugLib_SW
 122   1        CTK_TouchUartDebug_Init();      //´¥Ãþ´®¿Úµ÷ÊÔ³õÊ¼»¯
 123   1      #endif
 124   1        
 125   1        while(1)
 126   1        {
 127   2          if(OneCycleScanDone)
 128   2          {
 129   3            TouchRawDataFilter();   //RawDataÂË²¨º¯Êý£¬ÈçÐèÊ¹ÄÜÊý¾ÝÂË²¨£¬ÐèÔÚHC89F30x_GeneralKey_Touch_Filter.hÖÐÉèÖ
             -ÃÂË²¨Éî¶È£¬´Ëº¯Êý²»¿ÉÉ¾³ý
 130   3            Touch_Signal_Handle();
 131   3            TouchMultibuttonHandle(); //×îÇ¿°´¼ü´¦Àíº¯Êý£¬Èç¹û´óÓÚµÈÓÚÁ½¸ö°´¼üÍ¬Ê±ÓÐÐ§£¬ÄÇÃ´´¥ÃþÐÅºÅ×îÇ¿µÄ°´¼üÅÐ¶ÏÎ
             -ªÓÐÐ§£¬ÆäËû°´¼üÎÞÐ§
 132   3            OneCycleScanDone = 0;
 133   3      
 134   3            #if TouchUartDebugLib_SW
 135   3              ECTK = 0;               //´¥Ãþ´®¿Úµ÷ÊÔ·¢ËÍÊý¾ÝÇ°£¬±ØÐèÏÖ¹ØECTK£¬ºóÔÙ´ò¿ª
 136   3              CTK_TouchUartDebug();
 137   3              ECTK = 1;
 138   3            #endif
 139   3      
 140   3            if((TouchKeyFlag) != KEY_VALUE)
 141   3            {
 142   4              KEY_VALUE = TouchKeyFlag; //»ñÈ¡ÐÂµÄ°´¼üÖµ
 143   4              
 144   4            }
 145   3            else
 146   3            {
 147   4              
 148   4            }
 149   3          } 
 150   2          CheckKey(KEY_VALUE);
 151   2          RF_code_match() ; //RFÅä¶Ô´¦Àí  ½ÓÊÕ°´¼üÂë,²¢´æ³öÆðÀ´       
 152   2          RF_code_process();
 153   2          config_rf();
 154   2          check_address_change();
 155   2          check_wifi_work_state(); 
 156   2          
 157   2          CmdBuz() ;//·äÃùÆ÷Çý¶¯
 158   2          key_state_check();    //¼ì²âÒ£¿ØÆ÷°´¼üÊÇ°´ÏÂ»òÕßÌ§Æð     ¼ÓÕâ¸öº¯ÊýÓ°Ïì´¥Ãþ ¶¨Ê±Æ÷ÓÅÏÈ¼¶¸ßÓÚ´¥ÃþµÄÓÅÏÈ¼¶
 159   2      //    RF_LED_Flicker(); 
 160   2          
 161   2          
 162   2      //    Check_Key();
 163   2        }
 164   1      }
 165          
 166          
 167          
 168          void  CheckKey(u16 key_flag)
 169          {   
 170   1        
 171   1        if(key_flag != OLD_KEY) 
 172   1        {
 173   2      
 174   2          if((key_flag & 0x10) == K_1)
 175   2          {
C51 COMPILER V9.60.0.0   MAIN                                                              05/11/2020 22:35:55 PAGE 4   

 176   3            P3_5 = 0;
 177   3      //      key_pressed_20ms_cnt = 0;
 178   3      //      key_pressed_20ms_flag= 0;
 179   3            
 180   3            if(receive_rf_flag == 1)
 181   3            {
 182   4              receive_rf_flag = 0;
 183   4              config_rf_flag = 1;   //ÅäÍø±êÖ¾Îª1Ê±,°ÑµØÖ·ÂëÐ´Èëeeprom;     
 184   4              KEY1 = key_code  ;
 185   4            }
 186   3            
 187   3            SetupBz(M_BZ_KEY,1) ;//°´ÏÂ°´¼ü·äÃùÆ÷¶ÌÏì1Éù 
 188   3          }
 189   2          else 
 190   2          {
 191   3      //       if(key_pressed_20ms_flag == 1) 
 192   3      //       {
 193   3              P3_5 = 1;
 194   3      //       }
 195   3            
 196   3          }
 197   2          if((key_flag & 0x20) == K_2)
 198   2          {
 199   3            P2_4 = 0;
 200   3      //      key_pressed_20ms_cnt = 0;
 201   3      //      key_pressed_20ms_flag= 0;
 202   3            if(receive_rf_flag == 1)
 203   3            {
 204   4              receive_rf_flag = 0;
 205   4              config_rf_flag = 1;   //ÅäÍø±êÖ¾Îª1Ê±,°ÑµØÖ·ÂëÐ´Èëeeprom;     
 206   4              KEY2 = key_code  ;
 207   4            } 
 208   3            SetupBz(M_BZ_KEY,1) ;//°´ÏÂ°´¼ü·äÃùÆ÷¶ÌÏì1Éù 
 209   3          }
 210   2          else 
 211   2          {
 212   3      //      if(key_pressed_20ms_flag == 1) 
 213   3      //      {
 214   3              P2_4 = 1;
 215   3      //      }
 216   3            
 217   3          }
 218   2          if((key_flag & 0x40) == K_3)
 219   2          {
 220   3            P0_2 = 0;
 221   3      //      key_pressed_20ms_cnt = 0;
 222   3      //      key_pressed_20ms_flag= 0;
 223   3            if(receive_rf_flag == 1)
 224   3            {
 225   4              receive_rf_flag = 0;
 226   4              config_rf_flag = 1;   //ÅäÍø±êÖ¾Îª1Ê±,°ÑµØÖ·ÂëÐ´Èëeeprom;     
 227   4              KEY3 = key_code  ;
 228   4            }  
 229   3            SetupBz(M_BZ_KEY,1) ;//°´ÏÂ°´¼ü·äÃùÆ÷¶ÌÏì1Éù 
 230   3          }
 231   2          else 
 232   2          {
 233   3      //      if(key_pressed_20ms_flag == 1) 
 234   3      //      {
 235   3              P0_2 = 1; 
 236   3      //      }
 237   3            
C51 COMPILER V9.60.0.0   MAIN                                                              05/11/2020 22:35:55 PAGE 5   

 238   3          }
 239   2          OLD_KEY = key_flag;
 240   2        }
 241   1         
 242   1        
 243   1      }
 244          
 245          
 246          
 247          
 248          /**********************************************
 249          1. 0x60->KEY1 ; 
 250          2. 0x61->KEY2 ; 
 251          3. 0x62->KEY3 ; 
 252          4.  
 253          Ò£¿Ø½ÓÊÕ´¦Àíº¯Êý
 254          ***********************************************/
 255          
 256          void RF_code_process(void)  //RFÅä¶Ô´¦Àí
 257          {
 258   1        
 259   1           if(decode_ok==1)
 260   1           {
 261   2             decode_ok = 0;
 262   2       
 263   2             if((a_code1==addr_high1&&a_code2==addr_low1)||(a_code1==addr_high2&&a_code2==addr_low2))
 264   2             {       
 265   3               
 266   3               if(a_code4 == KEY1)
 267   3               {
 268   4                   if(last_key1_status == 0)
 269   4                   {
 270   5                       last_key1_status = 1;
 271   5                       key_1 = 0; 
 272   5                       SetupBz(M_BZ_KEY,1) ;//°´ÏÂ°´¼ü·äÃùÆ÷¶ÌÏì1Éù 
 273   5                   }   
 274   4               }
 275   3               
 276   3               else if(a_code4 == KEY2)
 277   3               {
 278   4                   if(last_key2_status == 0)
 279   4                   {
 280   5                       last_key2_status = 1;
 281   5                       key_2 = 0; 
 282   5                       SetupBz(M_BZ_KEY,1) ;//°´ÏÂ°´¼ü·äÃùÆ÷¶ÌÏì1Éù                
 283   5                   }  
 284   4               }
 285   3               
 286   3               else if(a_code4 == KEY3) 
 287   3               {
 288   4                   if(last_key3_status == 0)
 289   4                   {
 290   5                       last_key3_status = 1;
 291   5                       key_3 = 0;
 292   5                       SetupBz(M_BZ_KEY,1) ;//°´ÏÂ°´¼ü·äÃùÆ÷¶ÌÏì1Éù 
 293   5                   }     
 294   4               }
 295   3         
 296   3              
 297   3             }
 298   2         }
 299   1      
C51 COMPILER V9.60.0.0   MAIN                                                              05/11/2020 22:35:55 PAGE 6   

 300   1      }
 301          
 302          
 303          void RF_code_match(void)  //RFÅä¶Ô´¦Àí  ½ÓÊÕ°´¼üÂë,²¢´æ³öÆðÀ´
 304          {
 305   1      //    if(wifi_work_state ==1)
 306   1      //    {
 307   1             
 308   1                switch(a_code4)
 309   1                {
 310   2                   case 0x62:     //0x62->key1 
 311   2                     receive_rf_flag = 1;
 312   2                     key_code = 0x62;
 313   2                     addr_high_temporary = a_code1 ;
 314   2                     addr_low_temporary  = a_code2 ;  
 315   2      //             P3_5 = 0;
 316   2      //             P2_4 = 0;
 317   2      //             P0_2 = 0; 
 318   2                    break;
 319   2      
 320   2                   case 0x61:    //0x61->key2   
 321   2                     receive_rf_flag = 1;
 322   2                     key_code = 0x61  ; 
 323   2                     addr_high_temporary = a_code1 ;
 324   2                     addr_low_temporary  = a_code2 ;  
 325   2      //             P3_5 = 1;
 326   2      //             P2_4 = 1;
 327   2      //             P0_2 = 1; 
 328   2                    break;
 329   2      
 330   2                   case 0x60:    //0x60->key3
 331   2                     receive_rf_flag = 1;
 332   2                     key_code = 0x60;
 333   2                     addr_high_temporary = a_code1 ;
 334   2                     addr_low_temporary  = a_code2 ;
 335   2                          
 336   2                    break;
 337   2                   
 338   2                   default:
 339   2                      
 340   2                      break;
 341   2                }
 342   1               
 343   1      //    }
 344   1      
 345   1      }
 346           
 347          
 348            
 349          
 350          /************************************************************
 351          ÎÞÏßÅä¶Ô:Ê×ÏÈ±£Ö¤wifiÄ£¿é´¦ÓÚÅä¶Ô×´Ì¬,È»ºó³¤°´ËæÒâÌùµÄÈÎÒâ¼ü
 352          ³ÖÐø5sºó,RFÅä¶ÔÖ¸Ê¾µÆ(ºìµÆ)ÉÁË¸,ÔÚºìµÆÉÁË¸µÄ15sÄÚÔÙ°´¿ª¹ØµÄÈÎ
 353          Òâ¼ü,ÕâÊ±Åä¶ÔÖ¸Ê¾µÆ(ºìµÆ)Ãð,Åä¶Ô³É¹¦;Èç¹ûÒ»´ÎÃ»³É¹¦,ÖØ¸´ÕâÒ»
 354          ¹ý³Ì.
 355          ************************************************************/
 356          void config_rf(void)
 357          {
 358   1        
 359   1        
 360   1        if(config_rf_flag == 1)
 361   1        {
C51 COMPILER V9.60.0.0   MAIN                                                              05/11/2020 22:35:55 PAGE 7   

 362   2          config_rf_flag =0;
 363   2       
 364   2          if(ADDR_BUF[1] == addr_high_temporary && ADDR_BUF[2] == addr_low_temporary)  //
 365   2          {
 366   3             addr_high1 = addr_high_temporary ;
 367   3             addr_low1  = addr_low_temporary ;
 368   3             
 369   3             ADDR_BUF[1] = addr_high_temporary;
 370   3             ADDR_BUF[2] = addr_low_temporary;
 371   3          }
 372   2          else
 373   2          {
 374   3            if(ADDR_BUF[3] == addr_high_temporary && ADDR_BUF[4] == addr_low_temporary)
 375   3            {
 376   4              addr_high2 = addr_high_temporary ;
 377   4              addr_low2  = addr_low_temporary ;
 378   4              ADDR_BUF[3] = addr_high_temporary;
 379   4              ADDR_BUF[4] = addr_low_temporary;
 380   4            }
 381   3            else
 382   3            {
 383   4              addr_high1 = addr_high_temporary ;
 384   4              addr_low1  = addr_low_temporary ;
 385   4              
 386   4              ADDR_BUF[1] = addr_high_temporary;
 387   4              ADDR_BUF[2] = addr_low_temporary;
 388   4              
 389   4              
 390   4            }
 391   3          }
 392   2          
 393   2          
 394   2          
 395   2          ADDR_BUF[5] = KEY1;
 396   2          ADDR_BUF[6] = KEY2;
 397   2          ADDR_BUF[7] = KEY3;
 398   2        }
 399   1      }
 400          
 401          void check_address_change(void)
 402          {
 403   1        
 404   1        if((Last_addr_high1 != addr_high1)||(Last_addr_low1 != addr_low1)||(Last_addr_high2 != addr_high2)||(Last
             -_addr_low2 != addr_low2)||(Last_KEY1 != KEY1)||(Last_KEY2 != KEY2)||(Last_KEY3 != KEY3))
 405   1        {   
 406   2      
 407   2           Last_addr_high1 = addr_high1;
 408   2           Last_addr_low1 = addr_low1;    
 409   2           Last_addr_high2 = addr_high2;
 410   2           Last_addr_low2 = addr_low2;
 411   2           Last_KEY1  = KEY1;
 412   2           Last_KEY2  = KEY2;
 413   2           Last_KEY3  = KEY3;
 414   2            
 415   2      //     EEPROM_SectorErase(EE_ADDRESS1); //ÉÈÇø²Á³ý
 416   2      //     EEPROM_write_n(EE_ADDRESS1, ADDR_BUF, 8);  //Ð´Êý¾Ý  
 417   2      //     EEPROM_read_n(EE_ADDRESS1, ADDR_BUF, 8); 
 418   2          
 419   2          Flash_EraseBlock(EEPROM_ADDR);       //²Á³ýµØÖ·0x3C00ËùÔÚÉÈÇø
 420   2          Flash_WriteArr(EEPROM_ADDR,8,(u8*)ADDR_BUF);  //ÔÚµØÖ·0x3C00Ð´ÈëÊý¾Ý
 421   2          Flash_ReadArr(EEPROM_ADDR,8,(u8*)ADDR_BUF);
 422   2      
C51 COMPILER V9.60.0.0   MAIN                                                              05/11/2020 22:35:55 PAGE 8   

 423   2        }
 424   1               
 425   1      }
 426          
 427          
 428          void key_status_up(void)
 429          {
 430   1        key_1 = 1;  // °´¼üÌ§Æð
 431   1        key_2 = 1;
 432   1        key_3 = 1;
 433   1      }
 434          
 435          void key_state_check(void)
 436          {
 437   1        static u8 Last_key_state=0;
 438   1        if(Last_key_state != key_state)
 439   1        {   
 440   2           Last_key_state = key_state;  
 441   2           key_status_change_flag = 1;    
 442   2           key_state_cnt = 0;        
 443   2        }
 444   1        if(key_status_change_flag == 1)
 445   1        {
 446   2          if((key_state==key_up)&&(key_state_cnt>=50))//°´¼ü×´Ì¬ÊÇÌ§Æð,ÇÒ³ÖÐø50ms
 447   2          {
 448   3            last_key1_status = 0;    //ÉÏÒ»´Îkey1µÄ×´Ì¬  °´¼üÌ§Æð×´Ì¬
 449   3            last_key2_status = 0;    //ÉÏÒ»´Îkey2µÄ×´Ì¬  °´¼üÌ§Æð×´Ì¬
 450   3            last_key3_status = 0;    //ÉÏÒ»´Îkey3µÄ×´Ì¬  °´¼üÌ§Æð×´Ì¬     
 451   3            key_status_up();
 452   3            
 453   3            key_status_change_flag = 0;
 454   3          } 
 455   2        }
 456   1      } 
 457          
 458          
 459          /*******************************************************************
 460          1.¼ì²âwifiÊÇ·ñÁªÍø?wifi_work_state = 1;  //1->Î´ÁªÍø×´Ì¬;0->ÁªÍø×´Ì¬
 461          
 462          *******************************************************************/
 463           u8 last_wifi_work_state=0;
 464          void check_wifi_work_state(void)
 465          {
 466   1        
 467   1        if(last_wifi_work_state != wifi_work_state)
 468   1        {   
 469   2           last_wifi_work_state = wifi_work_state;
 470   2           if(wifi_start_15s_flag == 1) //wifiÆô¶¯15s±êÖ¾
 471   2           {
 472   3             if(wifi_work_state == 1)
 473   3             {
 474   4               EA = 0;
 475   4               Flash_EraseBlock(EEPROM_ADDR);
 476   4               EA = 1; 
 477   4             }  
 478   3           }     
 479   2                 
 480   2        }
 481   1      
 482   1      }
 483          
 484          //ÅäÍøÖ¸Ê¾µÆÉÁË¸(ºìµÆ)
C51 COMPILER V9.60.0.0   MAIN                                                              05/11/2020 22:35:55 PAGE 9   

 485          //void RF_LED_Flicker(void) 
 486          //{
 487          ////         P3_5 = 0;
 488          ////         P2_4 = 0;
 489          ////         P0_2 = 0; 
 490          ////    static u8 Color = 0;
 491          ////    static u8 i = 0;
 492          //    if(config_key == 1)
 493          //    {
 494          //        if(timer1 == 0)
 495          //        {
 496          //            timer1 = 200;  //ÉÁË¸Ê±¼ä
 497          ////            Color = !Color;
 498          //            if (timer1==200)
 499          //            {
 500          //               P3_5 = 0;
 501          //               P2_4 = 0;
 502          //               P0_2 = 0;         
 503          //            }
 504          //            else if (timer1==1)
 505          //            {
 506          //               P3_5 = 0;
 507          //               P2_4 = 0;
 508          //               P0_2 = 0;  
 509          //               config_key = 0;
 510          //            }
 511          //             
 512          //        }     
 513          //    }
 514          //     
 515          //} 
 516          
 517          
 518          
 519          
 520          
 521          
 522          
 523          
 524          
 525          
 526          
 527          
 528          
 529          
 530          
 531          
 532          
 533          
 534          
 535          
 536          
 537          
 538          
 539          
 540          
 541          
 542          
 543          
 544          
 545          
 546          
C51 COMPILER V9.60.0.0   MAIN                                                              05/11/2020 22:35:55 PAGE 10  

 547          
 548          
 549          
 550          
 551          
 552          
 553          
 554          
 555          
 556          
 557          
 558          
 559          
 560          
 561          
 562          
 563          
 564          
 565          /*********************************END OF FILE************************************/
 566          /******************* (C) COPYRIGHT 2009~2019 holychip ***************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    886    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     42    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
